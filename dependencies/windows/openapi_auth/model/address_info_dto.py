# coding: utf-8

"""
    Auth API

    API that provides authentication services for dapps.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_auth import schemas  # noqa: F401


class AddressInfoDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "address",
            "blockchainType",
        }
        
        class properties:
            
            
            class blockchainType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "evm": "EVM",
                        "solana": "SOLANA",
                        "aptos": "APTOS",
                    }
                
                @schemas.classproperty
                def EVM(cls):
                    return cls("evm")
                
                @schemas.classproperty
                def SOLANA(cls):
                    return cls("solana")
                
                @schemas.classproperty
                def APTOS(cls):
                    return cls("aptos")
            address = schemas.StrSchema
            publicKey = schemas.StrSchema
            __annotations__ = {
                "blockchainType": blockchainType,
                "address": address,
                "publicKey": publicKey,
            }
    
    address: MetaOapg.properties.address
    blockchainType: MetaOapg.properties.blockchainType
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blockchainType"]) -> MetaOapg.properties.blockchainType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publicKey"]) -> MetaOapg.properties.publicKey: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["blockchainType", "address", "publicKey", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blockchainType"]) -> MetaOapg.properties.blockchainType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publicKey"]) -> typing.Union[MetaOapg.properties.publicKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["blockchainType", "address", "publicKey", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        address: typing.Union[MetaOapg.properties.address, str, ],
        blockchainType: typing.Union[MetaOapg.properties.blockchainType, str, ],
        publicKey: typing.Union[MetaOapg.properties.publicKey, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AddressInfoDto':
        return super().__new__(
            cls,
            *args,
            address=address,
            blockchainType=blockchainType,
            publicKey=publicKey,
            _configuration=_configuration,
            **kwargs,
        )
