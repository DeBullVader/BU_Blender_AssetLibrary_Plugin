# coding: utf-8

"""
    aptos-api

    The aptos-api provider  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_aptos_api import schemas  # noqa: F401


class MultiEd25519SignatureRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "public_keys",
            "bitmap",
            "threshold",
            "type",
            "signatures",
        }
        
        class properties:
            type = schemas.StrSchema
            
            
            class public_keys(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'public_keys':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class signatures(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'signatures':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            threshold = schemas.NumberSchema
            bitmap = schemas.StrSchema
            __annotations__ = {
                "type": type,
                "public_keys": public_keys,
                "signatures": signatures,
                "threshold": threshold,
                "bitmap": bitmap,
            }
    
    public_keys: MetaOapg.properties.public_keys
    bitmap: MetaOapg.properties.bitmap
    threshold: MetaOapg.properties.threshold
    type: MetaOapg.properties.type
    signatures: MetaOapg.properties.signatures
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["public_keys"]) -> MetaOapg.properties.public_keys: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signatures"]) -> MetaOapg.properties.signatures: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["threshold"]) -> MetaOapg.properties.threshold: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bitmap"]) -> MetaOapg.properties.bitmap: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "public_keys", "signatures", "threshold", "bitmap", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["public_keys"]) -> MetaOapg.properties.public_keys: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signatures"]) -> MetaOapg.properties.signatures: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["threshold"]) -> MetaOapg.properties.threshold: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bitmap"]) -> MetaOapg.properties.bitmap: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "public_keys", "signatures", "threshold", "bitmap", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        public_keys: typing.Union[MetaOapg.properties.public_keys, list, tuple, ],
        bitmap: typing.Union[MetaOapg.properties.bitmap, str, ],
        threshold: typing.Union[MetaOapg.properties.threshold, decimal.Decimal, int, float, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        signatures: typing.Union[MetaOapg.properties.signatures, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MultiEd25519SignatureRequest':
        return super().__new__(
            cls,
            *args,
            public_keys=public_keys,
            bitmap=bitmap,
            threshold=threshold,
            type=type,
            signatures=signatures,
            _configuration=_configuration,
            **kwargs,
        )
