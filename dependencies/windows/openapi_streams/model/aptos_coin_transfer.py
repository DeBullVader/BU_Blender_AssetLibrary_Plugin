# coding: utf-8

"""
    Streams Api

    API that provides access to Moralis Streams  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_streams import schemas  # noqa: F401


class AptosCoinTransfer(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "valueWithDecimals",
            "from",
            "to",
            "txHash",
            "value",
            "transaction",
            "coin",
        }
        
        class properties:
            txHash = schemas.StrSchema
            transaction = schemas.StrSchema
            valueWithDecimals = schemas.Float64Schema
            _from = schemas.StrSchema
            value = schemas.StrSchema
            to = schemas.StrSchema
        
            @staticmethod
            def coin() -> typing.Type['AptosCoin']:
                return AptosCoin
            __annotations__ = {
                "txHash": txHash,
                "transaction": transaction,
                "valueWithDecimals": valueWithDecimals,
                "from": _from,
                "value": value,
                "to": to,
                "coin": coin,
            }
    
    valueWithDecimals: MetaOapg.properties.valueWithDecimals
    to: MetaOapg.properties.to
    txHash: MetaOapg.properties.txHash
    value: MetaOapg.properties.value
    transaction: MetaOapg.properties.transaction
    coin: 'AptosCoin'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["txHash"]) -> MetaOapg.properties.txHash: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transaction"]) -> MetaOapg.properties.transaction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["valueWithDecimals"]) -> MetaOapg.properties.valueWithDecimals: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["to"]) -> MetaOapg.properties.to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coin"]) -> 'AptosCoin': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["txHash", "transaction", "valueWithDecimals", "from", "value", "to", "coin", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["txHash"]) -> MetaOapg.properties.txHash: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transaction"]) -> MetaOapg.properties.transaction: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["valueWithDecimals"]) -> MetaOapg.properties.valueWithDecimals: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["to"]) -> MetaOapg.properties.to: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coin"]) -> 'AptosCoin': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["txHash", "transaction", "valueWithDecimals", "from", "value", "to", "coin", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        valueWithDecimals: typing.Union[MetaOapg.properties.valueWithDecimals, decimal.Decimal, int, float, ],
        to: typing.Union[MetaOapg.properties.to, str, ],
        txHash: typing.Union[MetaOapg.properties.txHash, str, ],
        value: typing.Union[MetaOapg.properties.value, str, ],
        transaction: typing.Union[MetaOapg.properties.transaction, str, ],
        coin: 'AptosCoin',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AptosCoinTransfer':
        return super().__new__(
            cls,
            *args,
            valueWithDecimals=valueWithDecimals,
            to=to,
            txHash=txHash,
            value=value,
            transaction=transaction,
            coin=coin,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_streams.model.aptos_coin import AptosCoin
