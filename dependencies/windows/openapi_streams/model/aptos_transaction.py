# coding: utf-8

"""
    Streams Api

    API that provides access to Moralis Streams  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_streams import schemas  # noqa: F401


class AptosTransaction(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "gasLimit",
            "gasUsed",
            "eventChangeHash",
            "sender",
            "success",
            "stateChangeHash",
            "gasUnitPrice",
            "type",
            "hash",
        }
        
        class properties:
            gasUnitPrice = schemas.StrSchema
            type = schemas.StrSchema
            gasUsed = schemas.StrSchema
            eventChangeHash = schemas.StrSchema
            stateChangeHash = schemas.StrSchema
            gasLimit = schemas.StrSchema
            sender = schemas.StrSchema
            success = schemas.BoolSchema
            hash = schemas.StrSchema
            __annotations__ = {
                "gasUnitPrice": gasUnitPrice,
                "type": type,
                "gasUsed": gasUsed,
                "eventChangeHash": eventChangeHash,
                "stateChangeHash": stateChangeHash,
                "gasLimit": gasLimit,
                "sender": sender,
                "success": success,
                "hash": hash,
            }
    
    gasLimit: MetaOapg.properties.gasLimit
    gasUsed: MetaOapg.properties.gasUsed
    eventChangeHash: MetaOapg.properties.eventChangeHash
    sender: MetaOapg.properties.sender
    success: MetaOapg.properties.success
    stateChangeHash: MetaOapg.properties.stateChangeHash
    gasUnitPrice: MetaOapg.properties.gasUnitPrice
    type: MetaOapg.properties.type
    hash: MetaOapg.properties.hash
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gasUnitPrice"]) -> MetaOapg.properties.gasUnitPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gasUsed"]) -> MetaOapg.properties.gasUsed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eventChangeHash"]) -> MetaOapg.properties.eventChangeHash: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stateChangeHash"]) -> MetaOapg.properties.stateChangeHash: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gasLimit"]) -> MetaOapg.properties.gasLimit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sender"]) -> MetaOapg.properties.sender: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["success"]) -> MetaOapg.properties.success: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hash"]) -> MetaOapg.properties.hash: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["gasUnitPrice", "type", "gasUsed", "eventChangeHash", "stateChangeHash", "gasLimit", "sender", "success", "hash", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gasUnitPrice"]) -> MetaOapg.properties.gasUnitPrice: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gasUsed"]) -> MetaOapg.properties.gasUsed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eventChangeHash"]) -> MetaOapg.properties.eventChangeHash: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stateChangeHash"]) -> MetaOapg.properties.stateChangeHash: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gasLimit"]) -> MetaOapg.properties.gasLimit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sender"]) -> MetaOapg.properties.sender: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["success"]) -> MetaOapg.properties.success: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hash"]) -> MetaOapg.properties.hash: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["gasUnitPrice", "type", "gasUsed", "eventChangeHash", "stateChangeHash", "gasLimit", "sender", "success", "hash", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        gasLimit: typing.Union[MetaOapg.properties.gasLimit, str, ],
        gasUsed: typing.Union[MetaOapg.properties.gasUsed, str, ],
        eventChangeHash: typing.Union[MetaOapg.properties.eventChangeHash, str, ],
        sender: typing.Union[MetaOapg.properties.sender, str, ],
        success: typing.Union[MetaOapg.properties.success, bool, ],
        stateChangeHash: typing.Union[MetaOapg.properties.stateChangeHash, str, ],
        gasUnitPrice: typing.Union[MetaOapg.properties.gasUnitPrice, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        hash: typing.Union[MetaOapg.properties.hash, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AptosTransaction':
        return super().__new__(
            cls,
            *args,
            gasLimit=gasLimit,
            gasUsed=gasUsed,
            eventChangeHash=eventChangeHash,
            sender=sender,
            success=success,
            stateChangeHash=stateChangeHash,
            gasUnitPrice=gasUnitPrice,
            type=type,
            hash=hash,
            _configuration=_configuration,
            **kwargs,
        )
