# coding: utf-8

"""
    Streams Api

    API that provides access to Moralis Streams  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_streams import schemas  # noqa: F401


class GetNativeBalances(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "selectors",
            "type",
        }
        
        class properties:
            
            
            class selectors(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'selectors':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "tx": "TX",
                        "log": "LOG",
                        "erc20transfer": "ERC20TRANSFER",
                        "erc20approval": "ERC20APPROVAL",
                        "nfttransfer": "NFTTRANSFER",
                        "internalTx": "INTERNAL_TX",
                    }
                
                @schemas.classproperty
                def TX(cls):
                    return cls("tx")
                
                @schemas.classproperty
                def LOG(cls):
                    return cls("log")
                
                @schemas.classproperty
                def ERC20TRANSFER(cls):
                    return cls("erc20transfer")
                
                @schemas.classproperty
                def ERC20APPROVAL(cls):
                    return cls("erc20approval")
                
                @schemas.classproperty
                def NFTTRANSFER(cls):
                    return cls("nfttransfer")
                
                @schemas.classproperty
                def INTERNAL_TX(cls):
                    return cls("internalTx")
            __annotations__ = {
                "selectors": selectors,
                "type": type,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    selectors: MetaOapg.properties.selectors
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["selectors"]) -> MetaOapg.properties.selectors: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["selectors"], typing_extensions.Literal["type"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["selectors"]) -> MetaOapg.properties.selectors: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["selectors"], typing_extensions.Literal["type"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        selectors: typing.Union[MetaOapg.properties.selectors, list, tuple, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'GetNativeBalances':
        return super().__new__(
            cls,
            *args,
            selectors=selectors,
            type=type,
            _configuration=_configuration,
        )
